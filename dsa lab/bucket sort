#include <stdio.h>
#include <stdlib.h>

// A structure for a bucket
struct Node {
    float data;
    struct Node* next;
};

// Function to insert an element into the sorted linked list (insertion sort)
struct Node* insertSorted(struct Node* list, float value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (list == NULL || list->data >= value) {
        newNode->next = list;
        return newNode;
    }

    struct Node* current = list;
    while (current->next != NULL && current->next->data < value) {
        current = current->next;
    }
    newNode->next = current->next;
    current->next = newNode;

    return list;
}

// Function to perform bucket sort
void bucketSort(float arr[], int n) {
    // Create n empty buckets
    struct Node** buckets = (struct Node**)malloc(n * sizeof(struct Node*));
    for (int i = 0; i < n; i++) {
        buckets[i] = NULL;
    }

    // Put array elements into buckets
    for (int i = 0; i < n; i++) {
        int bucketIndex = n * arr[i];  // Index in bucket
        buckets[bucketIndex] = insertSorted(buckets[bucketIndex], arr[i]);
    }

    // Merge all buckets into arr[]
    int index = 0;
    for (int i = 0; i < n; i++) {
        struct Node* current = buckets[i];
        while (current != NULL) {
            arr[index++] = current->data;
            struct Node* temp = current;
            current = current->next;
            free(temp); // Clean up memory
        }
    }

    free(buckets); // Free the bucket array
}

// Function to print the array
void printArray(float arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%.2f ", arr[i]);
    printf("\n");
}

// Main function to test the bucket sort
int main() {
    float arr[] = {0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array:\n");
    printArray(arr, n);

    bucketSort(arr, n);

    printf("\nSorted array:\n");
    printArray(arr, n);

    return 0;
}
